!/ ------------------------------------------------------------------- /
      MODULE W3REF1MD
!/
!/                  +-----------------------------------+
!/                  | WAVEWATCH III                     |
!/                  |            F. Ardhuin             |
!/                  |                        FORTRAN 90 |
!/                  | Last update :         24-Fev-2012 |
!/                  +-----------------------------------+
!/
!/    31-Mar-2010 : Origination.                        ( version 3.14.IFREMER )
!/    03-Sep-2010 : Clean up                            ( version 3.14.IFREMER )
!/    31-May-2011 : Adding variable reflections         ( version 4.01 )
!/    02-Nov-2011 : Compatibility with unst. grids      ( version 4.04 )
!/    24-Fev-2012 : Correction of angle in fluxes       ( version 4.05 )
!/ 
!  1. Purpose :
!
!     This module computes : 
!        - shoreline reflection 
!        - unresolved islands and iceberg reflections
!
!  2. Variables and types :
!
!      Name      Type  Scope    Description
!     ----------------------------------------------------------------
!     ----------------------------------------------------------------
!
!  3. Subroutines and functions :
!
!      Name      Type  Scope    Description
!     ----------------------------------------------------------------
!      W3SREF    Subr. Public   Reflection of waves (shorline, islands...)
!     ----------------------------------------------------------------
!
!  4. Subroutines and functions used :
!
!      Name      Type  Module   Description
!     ----------------------------------------------------------------
!      STRACE    Subr. W3SERVMD Subroutine tracing.
!     ----------------------------------------------------------------
!
!  5. Remarks :
!
!
!  6. Switches :
!
!     !/S  Enable subroutine tracing.
!
!  7. Source code :
!/
!/ ------------------------------------------------------------------- /
!/
!
      PUBLIC
!/
!/ Public variables
!/
!
!/
      CONTAINS
!/ ------------------------------------------------------------------- /
      SUBROUTINE W3SREF(A, CG, WN, EMEAN, FMEAN, DEPTH, CX1, CY1, REFLC, REFLD,     &
                         DELX, DELY, DELA, TRNX, TRNY, BERG, DT,  IX, IY,S)
!/
!/                  +-----------------------------------+
!/                  | WAVEWATCH III           NOAA/NCEP |
!/                  |            F. Ardhuin             |
!/                  |                        FORTRAN 90 |
!/                  | Last update :         31-May-2011 |
!/                  +-----------------------------------+
!/
!/    06-May-2010 : Origination.                          ( version 3.14-Ifremer )
!/    31-May-2011 : Introduction of amplitude-dependent R (version 4.05)
!/
!  1. Purpose :
!
!     Computes coastal and iceberg/island reflections
!
!  2. Method :
!
!     Adds the reflected components from 2 types of sources: 
!        shoreline reflection, subgrid obstruction and icebergs 
!      
!
!  3. Parameters :
!
!     Parameter list
!     ----------------------------------------------------------------
!  A         R.A.  I   Action density spectrum (1-D)
!       CG        R.A.  I   Group velocities.
!       WN        R.A.  I   Wavenumbers.
!       DEPTH     Real  I   Mean water depth.
!       S         R.A.  O   Source term (1-D version).
!       D         R.A.  O   Diagonal term of derivative (1-D version).
!     ----------------------------------------------------------------
!
!  4. Subroutines used :
!
!      Name      Type  Module   Description
!     ----------------------------------------------------------------
!      STRACE    Subr. W3SERVMD Subroutine tracing.
!     ----------------------------------------------------------------
!
!  5. Called by :
!
!      Name      Type  Module   Description
!     ----------------------------------------------------------------
!      W3SRCE    Subr. W3SRCEMD Source term integration.
!      W3EXPO    Subr.   N/A    Point output post-processor.
!      GXEXPO    Subr.   N/A    GrADS point output post-processor.
!     ----------------------------------------------------------------
!
!  6. Error messages :
!
!       None.
!
!  7. Remarks :
!
!  8. Structure :
!
!     See source code.
!
!  9. Switches :
!
!     !/S  Enable subroutine tracing.
!
! 10. Source code :
!
!/ ------------------------------------------------------------------- /
      USE CONSTANTS
      USE W3GDATMD, ONLY: NK, NTH, NSPEC, SIG, DTH, DDEN,  &
                          REFPARS, ECOS, ESIN, EC2, MAPTH, MAPWN, &
                          SIG2, DSII, IOBPD, GTYPE, UNGTYPE
!/S      USE W3SERVMD, ONLY: STRACE
!/
!
      IMPLICIT NONE
!/
!/ ------------------------------------------------------------------- /
!/ Parameter list
!/
      REAL, INTENT(IN)        :: CG(NK), WN(NK), DEPTH, EMEAN, FMEAN
      REAL, INTENT(INOUT)     :: A(NSPEC)
      REAL, INTENT(IN)        :: CX1, CY1, DT
      INTEGER, INTENT(IN)     :: REFLD(4), IX, IY
      REAL, INTENT(IN)        :: REFLC(4), DELX, DELY, DELA, TRNX, &
                                 TRNY, BERG
      REAL, INTENT(OUT)       :: S(NSPEC)
!/
!/ ------------------------------------------------------------------- /
!/ Local parameters
!/ 
      INTEGER         :: ISPECI, ISPEC, IK, ITH, ITH2, ITH3, NRS
!/S      INTEGER, SAVE           :: IENT = 0
      LOGICAL, SAVE   :: FIRST = .TRUE.
       
      REAL            :: R1, R2, R3, R4, R2X, R2Y
      REAL            :: FAC1, FAC2, FAC3, FAC4, RAMP0, RAMP, &
                         RAMP1, RAMP2, MICHEFAC, SLOPE
!/
!/ ------------------------------------------------------------------- /
!/
!/S      CALL STRACE (IENT, 'W3SREF')
!
! 0.  Initializations ------------------------------------------------ *
!
!
! 1.  Sets reflection term to zero
!
      S = 0.

      NRS=NINT(REFPARS(8))
      IF (REFPARS(6).GT.0) THEN
!
! This is the Miche parameter for a beach slope of REFLC(3) 
!
        SLOPE=MAX(0.001,REFLC(3))
        MICHEFAC=0.0001*GRAV**2*(SLOPE**5)  &
                   /(MAX(EMEAN,1E-4)*MAX(FMEAN,0.001)**4)
        RAMP0=0.07*(ALOG10(MICHEFAC)+4.5)+1.5*MICHEFAC  ! IF REFLC(1)=1, 0.07 should be 0.007
      ELSE
        RAMP0=1.
        ENDIF

! WRITE(6,*) 'TEST:',IX,REFPARS,'##',REFLC,'MICHE:',MICHEFAC
!
! 2.  Shoreline reflection =============================================== *
!
      IF (REFLC(1).GT.0) THEN 
        FAC1=1/(0.5*REAL(NTH))
        FAC2=1.57/(0.5*REAL(NTH))
!           FAC3=2.6/(0.5*REAL(NTH))  ! this is for NRS=4
        FAC3=2./SUM(ABS(ECOS(1:NTH))**NRS)
        FAC4=1.
!
        DO IK=1, NK
!
! Includes frequency dependence (see Elgar et al. JPO 1994)
!       
          IF (REFPARS(6).GT.0) THEN
            RAMP=(MAX((0.75*TPI*FMEAN/SIG(IK)),1.)**REFPARS(10))*RAMP0
            RAMP1=MIN(REFPARS(9),REFLC(1)*RAMP)
            RAMP2=MIN(REFPARS(9),REFLC(2)*RAMP)
          ELSE
            RAMP1=RAMP0*REFLC(1)
            RAMP2=RAMP0*REFLC(2)
            END IF
!
! Special treatment for unstructured grids
!
          IF (GTYPE.EQ.UNGTYPE) THEN 
            DO ITH=1, NTH
              ISPECI=ITH+(IK-1)*NTH
              A(ISPECI)=A(ISPECI)*IOBPD(ITH,IX) !puts to zero the energy not going to coast
              END DO
!
            DO ITH=1, NTH
              R1=ECOS(1+MOD(ABS(ITH-REFLD(1)),NTH))
              R1=IOBPD(ITH,IX)
              ISPECI=ITH+(IK-1)*NTH
              R2=RAMP1*A(ISPECI)
              IF (R1.GT.0.AND.R2.GT.0) THEN 
!
! Determines direction of specular reflection: th3=pi+2*n-th1  
! 
                ITH3=1+MOD(NTH/2+NTH+2*REFLD(1)-ITH-1,NTH)
                DO ITH2=1,NTH
!
!  Adds energy into reflected directions (ITH2)
!
                  ISPEC=ITH2+(IK-1)*NTH
                  R3=ECOS(1+MOD(ABS(ITH2-REFLD(1)),NTH))
                  IF (R3.LT.0) THEN 
                    R4=ECOS(1+MOD(ABS(ITH2-ITH3),NTH))*(1-IOBPD(ITH2,IX))
                    IF (R4.GT.0.) THEN 
!
! Tests the type of shoreline geometry
! NB: REFLD(3) or REFLD(4) is equal to 1 if the sea point is between two land points 
                    SELECT CASE (REFLD(2))
                      CASE (0)
                   ! Sharp corner: broad reflection
                        S(ISPEC)=S(ISPEC)+R2*FAC1/DT
                      CASE (1)
                   ! mild corner: average reflection
                        S(ISPEC)=S(ISPEC)+R2*ABS(R4)*FAC2/DT
                      CASE (2)
                   ! straight coast: narrow reflection
                   !     IF(ITH3.EQ.ITH2) S(ISPEC)=S(ISPEC)+R2/DT  ! THIS IS FOR SPECULAR REF. 
                         S(ISPEC)=S(ISPEC)+R2*(R4**NRS) *FAC3/DT
                      END SELECT
                    END IF  ! (R4.GT.0.)
                  END IF  ! (R3.LT.0) 
                END DO ! ITH2=1,NTH
              END IF  ! (R1.GT.0.AND.R2.GT.0)
            END DO  ! ITH=1, NTH 
          ELSE ! (GTYPE.EQ.UNGTYPE)
!
! This is for structured grids .... 
!
!
!  Loop on  incident wave direction (ITH)
!
            DO ITH=1, NTH
              R1=ECOS(1+MOD(ABS(ITH-REFLD(1)),NTH))
              R2=RAMP1*A(ITH+(IK-1)*NTH)
              IF (R1.GT.0.AND.R2.GT.0) THEN 
                DO ITH2=1,NTH
!
!  Adds energy into reflected directions (ITH2)
!
                  ISPEC=ITH2+(IK-1)*NTH
                  R3=ECOS(1+MOD(ABS(ITH2-REFLD(1)),NTH))
                  IF (R3.LT.0) THEN 
!
! Determines direction of specular reflection: th3=pi+2*n-th1  
!
                    ITH3=1+MOD(NTH/2+NTH+2*REFLD(1)-ITH-1,NTH)
                    R4=ECOS(1+MOD(ABS(ITH2-ITH3),NTH))
                    IF (R4.GT.0.) THEN 
!
! Tests the type of shoreline geometry
! NB: REFLD(3) or REFLD(4) is equal to 1 if the reflection is applied (real land neighbor)
                      SELECT CASE (REFLD(2))
                      CASE (0)
                   ! Sharp corner: broad reflection
                          S(ISPEC)=S(ISPEC)+    &
                            REAL(REFLD(3))*R2*CG(IK)*ABS(ECOS(ITH2)/DELX)*FAC1   &
                           +REAL(REFLD(4))*R2*CG(IK)*ABS(ESIN(ITH2)/DELY)*FAC1
                      CASE (1)
                   ! mild corner: average reflection
!
                          S(ISPEC)=S(ISPEC)+    &
                            REAL(REFLD(3))*R2*CG(IK)*ABS(ECOS(ITH2)/DELX)*ABS(R4)*FAC2 &
                          + REAL(REFLD(4))*R2*CG(IK)*ABS(ESIN(ITH2)/DELY)*ABS(R4)*FAC2
                      CASE (2)
                   ! straight coast: narrow reflection
! Specular for tests 
!                   S(ISPEC)=S(ISPEC)+REAL(REFLD(3))*R2*CG(IK)*ABS(ECOS(ITH2)/DELX)  &
!                                    +REAL(REFLD(4))*R2*CG(IK)*ABS(ESIN(ITH2)/DELY)
!
                           S(ISPEC)=S(ISPEC)+REAL(REFLD(3))*R2*CG(IK)*ABS(ECOS(ITH2)/DELX) &
                                                *(R4**NRS) *FAC3                          & 
                                            +REAL(REFLD(4))*R2*CG(IK)*ABS(ESIN(ITH2)/DELY) &
                                                *(R4**NRS) *FAC3
                        END SELECT
                      END IF ! (R4.GT.0.)
                    END IF  ! (R3.LT.0) 
                  END DO  ! ITH2=1,NTH
                END IF  ! (R1.GT.0.AND.R2.GT.0) 
              END DO  ! ITH=1,NTH
            
            END IF  ! UNGTYPE

          END DO ! loop on IK
        END IF
!
!  Add diffuse reflection due to subgrid islands and icebergs
!  At present this feature is not supported for unstructured grids. 
!
      IF (    ((REFPARS(2).GT.0.).AND.((TRNX+TRNY).LT.2))     &
        .OR.((REFPARS(4).GT.0.).AND.(BERG.GT.0)       )   ) THEN 
        R2X=  RAMP2*REFPARS(2)*MAX(0.,MIN(1.,(1-TRNX)))  &
            + RAMP2*REFPARS(4)*MAX(0.,MIN(1.,(1-EXP(-BERG*DELX*0.0001))))
        R2Y=  RAMP2*REFPARS(2)*MAX(0.,MIN(1.,(1-TRNY)))  &
            + RAMP2*REFPARS(4)*MAX(0.,MIN(1.,(1-EXP(-BERG*DELY*0.0001))))
        FAC1=1/(0.5*REAL(NTH))
        DO IK=1, NK
          DO ITH=1, NTH
            R2=A(ITH+(IK-1)*NTH)
            IF (R2.GT.0.) THEN 
 
              DO ITH2=1,NTH
                ISPEC=ITH2+(IK-1)*NTH
                R3=ECOS(1+MOD(NTH+ITH2-ITH,NTH))
                IF (R3.LT.0) THEN 
                     S(ISPEC)=S(ISPEC)+ &
                               CG(IK)*R2X*R2*ABS(ECOS(ITH2)/DELX)*FAC1 &
                             + CG(IK)*R2Y*R2*ABS(ESIN(ITH2)/DELY)*FAC1
                  END IF
                END DO
              END IF
            END DO
          END DO
        END IF

!/
!/ End of W3SREF ----------------------------------------------------- /
!/
      END SUBROUTINE W3SREF!/ ------------------------------------------------------------------- /

!/
!/ End of module W3REF1MD -------------------------------------------- /
!/
      END MODULE W3REF1MD


