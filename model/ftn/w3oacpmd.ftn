#include "w3macros.h"
!/ ------------------------------------------------------------------- /
  MODULE w3oacpmd

   !!===========================================================================
   !!                   ***  MODULE  tooloasismct  ***
   !!
   !! Generic Module used for coupling applications with OASIS3-MCT 
   !!
   !!===========================================================================

   USE mod_oasis                                      ! OASIS3-MCT module 

   IMPLICIT NONE
   PRIVATE

   INTEGER               :: il_compid                 ! Component model ID returned by oasis_init_comp
   CHARACTER(len=6)      :: cl_model_name = 'wwatch'  ! Model name (same as in namcouple)   
   INTEGER               :: il_err                    ! Return error code
   INTEGER, PUBLIC       :: il_nb_rcv, il_nb_snd      ! Number of coupling fields    
   INTEGER, PARAMETER    :: ip_maxfld=50              ! Maximum number of coupling fields
   INTEGER               :: NNODES                    ! Total numbers of cell in the grid
   
   TYPE, PUBLIC          :: CPL_FIELD                 ! Type for coupling field information
      CHARACTER(len = 8) :: cl_field_name             ! Name of the coupling field   
      INTEGER            :: il_field_id               ! Field ID
   END TYPE CPL_FIELD

   TYPE(CPL_FIELD), DIMENSION(ip_maxfld), PUBLIC :: rcv_fld, snd_fld   ! Coupling fields

   !! * Accessibility
   PUBLIC cpl_oasis_init
   PUBLIC cpl_oasis_grid
   PUBLIC cpl_oasis_define 
   PUBLIC cpl_oasis_snd
   PUBLIC cpl_oasis_rcv
   PUBLIC cpl_oasis_finalize   

  CONTAINS

  SUBROUTINE cpl_oasis_init(id_lcomm)

   !&E---------------------------------------------------------------------
   !&E                 *** ROUTINE cpl_oasis_init  ***
   !&E
   !&E ** Purpose : Coupling initialisation 
   !&E
   !&E ** Description : 
   !&E
   !&E ** Called by : 
   !&E
   !&E ** External calls :
   !&E
   !&E ** Used ij-arrays :
   !&E
   !&E ** Modified variables : 
   !&E
   !&E ** Reference :
   !&E
   !&E ** History :
   !&E        2013-07 : A. THEVENIN (CERFACS) : Creation 
   !&E
   !&E---------------------------------------------------------------------

   !! * Argument
   INTEGER, INTENT(OUT) :: id_lcomm                   ! Model local communicator
   
   !! * Local declaration
   
   !!----------------------------------------------------------------------
   !! * Executable part

   !! Initialise the coupling
   CALL oasis_init_comp (il_compid, cl_model_name, il_err)
   IF (il_err /= 0) THEN
      CALL oasis_abort(il_compid, 'cpl_oasis_init', 'Problem during oasis_init_comp')
   ENDIF

   !! Get the value of a local MPI communicator to be used by WW3 for its internal parallelisation
   CALL oasis_get_localcomm (id_lcomm, il_err)
   IF (il_err /= 0) THEN
      CALL oasis_abort(il_compid, 'cpl_oasis_init', 'Problem during oasis_get_localcomm')
   ENDIF


  END SUBROUTINE cpl_oasis_init


   !!======================================================================

  SUBROUTINE cpl_oasis_grid(ld_master,id_lcomm)

   !&E---------------------------------------------------------------------
   !&E                 *** ROUTINE cpl_oasis_grid  ***
   !&E
   !&E ** Purpose : Grid data file definition 
   !&E
   !&E ** Description : 
   !&E
   !&E ** Called by : 
   !&E
   !&E ** External calls :
   !&E
   !&E ** Used ij-arrays :
   !&E
   !&E ** Modified variables : 
   !&E
   !&E ** Reference :
   !&E
   !&E ** History :
   !&E        2013-10 : A. THEVENIN (CERFACS) : Creation 
   !&E
   !&E---------------------------------------------------------------------
   USE CONSTANTS, ONLY: RADIUS, DERA
   USE W3GDATMD,  ONLY: NX, NY, FLAGLL, XGRD, YGRD, MAPSTA, HPFAC, HQFAC, GTYPE

!/MPI      INCLUDE "mpif.h"

   !! * Argument
   LOGICAL, INTENT(IN) :: ld_master                  ! MASTER process or not
   INTEGER, INTENT(IN) :: id_lcomm                   ! Model local communicator
   
   !! * Local declaration
   INTEGER, ALLOCATABLE :: MASK(:,:)
   INTEGER              :: I, IX, IY, NXW, NXE, NYS, NYN, INODE, IERR_MPI
   REAL, ALLOCATABLE    :: LON(:,:),LAT(:,:),AREA(:,:),      &
                           CORLON(:,:,:),CORLAT(:,:,:)
   REAL                 :: FACTOR
   
   !!----------------------------------------------------------------------
   !! * Executable part


   IF (ld_master) THEN

     IF (FLAGLL) THEN
       FACTOR = 1.
     ELSE
       FACTOR = 1. / (RADIUS * DERA)
     END IF

     ! Get the usefull grid

     NXW = 1 ; NXE = NX ; NYS = 1 ; NYN = NY 
     DO WHILE ( MAXVAL(MAPSTA(:,NXW)) == 0. )
       NXW = NXW + 1
     END DO
     DO WHILE ( MAXVAL(MAPSTA(:,NXE)) == 0. )
       NXE = NXE - 1
     END DO
     DO WHILE ( MAXVAL(MAPSTA(NYS,:)) == 0. )
       NYS = NYS + 1
     END DO
     DO WHILE ( MAXVAL(MAPSTA(NYN,:)) == 0. )
       NYN = NYN - 1
     END DO
     NNODES = (NXE-NXW+1)*(NYN-NYS+1)

     ! Model grid longitudes and latitudes

     ALLOCATE ( LON(NNODES,1), LAT(NNODES,1) ) 
     I = 0
     DO IY = NYS, NYN
     DO IX = NXW, NXE   ! plus efficace d inverser les boucles mais j ai garde ce sens pour etre coherent avec NSEA order
       I = I+1
       ! Get the longitudes, latitudes of the nodes
       LON(I,1)=XGRD(IY,IX)*FACTOR
       LAT(I,1)=YGRD(IY,IX)*FACTOR
     END DO
     END DO

      CALL oasis_write_grid ('ww3t', NNODES, 1, LON, LAT)

     ! Model grid cell corner longitudes and latitudes

     IF (GTYPE <=2) THEN

       ALLOCATE ( AREA(NNODES,1), CORLON(NNODES,1,4), CORLAT(NNODES,1,4) )
       I = 0
       DO IY = NYS, NYN
       DO IX = NXW, NXE
         I = I+1

         ! Get the lon, lat of the corners of the cells
         CORLON(I,1,1)=LON(I,1)+HPFAC(IY,IX)/2.*FACTOR
         CORLON(I,1,2)=LON(I,1)-HPFAC(IY,IX)/2.*FACTOR
         CORLON(I,1,3)=LON(I,1)-HPFAC(IY,IX)/2.*FACTOR
         CORLON(I,1,4)=LON(I,1)+HPFAC(IY,IX)/2.*FACTOR
         CORLAT(I,1,1)=LAT(I,1)+HQFAC(IY,IX)/2.*FACTOR
         CORLAT(I,1,2)=LAT(I,1)+HQFAC(IY,IX)/2.*FACTOR
         CORLAT(I,1,3)=LAT(I,1)-HQFAC(IY,IX)/2.*FACTOR
         CORLAT(I,1,4)=LAT(I,1)-HQFAC(IY,IX)/2.*FACTOR

         ! Get the area of the cells
!cval Bon pour le non structue ?
         AREA(I,1)=HPFAC(IY,IX)*HQFAC(IY,IX)
       END DO
       END DO

       CALL oasis_write_corner('ww3t', NNODES, 1, 4, CORLON, CORLAT)

       CALL oasis_write_area('ww3t', NNODES, 1, area)

     ELSE
       PRINT *, 'YOU CANNOT USE CONSERVATIVE INTERPOLATIONS'
       PRINT *, 'WITH UNSTRUCTURED GRIDS.'
!!!/MPI      CALL MPI_FINALIZE  ( IERR_MPI )
!!!      STOP
     END IF


     ! Model grid mask

     ALLOCATE ( MASK(NNODES,1) )
     I = 0
     DO IY = NYS, NYN
     DO IX = NXW, NXE
       I = I+1

       ! Get the mask : 0 - sea 1 - open boundary cells (the land is already excluded)
       MASK(I,1) = 1 - MOD(MAPSTA(IY,IX),2) 
     END DO
     END DO

     CALL oasis_write_mask('ww3t', NNODES, 1, mask)

     ! Terminate grid writing
     CALL oasis_terminate_grids_writing()

     DEALLOCATE(LON)
     DEALLOCATE(LAT)
     DEALLOCATE(CORLON)
     DEALLOCATE(CORLAT)
     DEALLOCATE(AREA)
     DEALLOCATE(MASK)

   ENDIF
   
!/MPI   CALL MPI_Barrier(id_lcomm, il_err)

  END SUBROUTINE cpl_oasis_grid


   !!======================================================================


  
  SUBROUTINE cpl_oasis_define(NDSO, rcv_str, snd_str)

   !&E---------------------------------------------------------------------
   !&E                 ***  ROUTINE cpl_oasis_define  ***
   !&E
   !&E ** Purpose : Partition definition and coupling fields declaration 
   !&E
   !&E ** Description :
   !&E
   !&E ** Called by : 
   !&E
   !&E ** External calls :
   !&E
   !&E ** Used ij-arrays :
   !&E
   !&E ** Modified variables : 
   !&E
   !&E ** Reference :
   !&E
   !&E ** History :
   !&E       2013-07 : A. THEVENIN (CERFACS) : Creation
   !&E
   !&E---------------------------------------------------------------------

   USE W3GDATMD, ONLY: NSEAL,NSEA, NX, NY, MAPSTA, MAPSF
   USE W3ODATMD, ONLY: NAPROC, IAPROC

   !! * Argument
   INTEGER, INTENT(IN)                          :: NDSO
   CHARACTER(LEN=1024), INTENT(IN)              :: rcv_str, snd_str

   !! * Local declarations
   INTEGER                 :: ib_i,i
   INTEGER                 :: il_part_id      ! PartitionID
   INTEGER, ALLOCATABLE, DIMENSION(:)   :: ila_paral       ! Description of the local partition in the global index space
   INTEGER, DIMENSION(4)   :: ila_shape       ! Vector giving the min & max index for each dim of the fields
   INTEGER, DIMENSION(2)   :: ila_var_nodims  ! rank of fields & number of bundles (1 with OASIS3-MCT)
   INTEGER                 :: ISEA, JSEA, IX, IY
   INTEGER                 :: NHXW, NHXE, NHYS, NHYN  ! size of the halo at the western, eastern, southern, northern boundaries
   LOGICAL                 :: ll_mpi_file     ! to check if there an mpi.txt file for domain decompasition
   !!----------------------------------------------------------------------
   !! * Executable part

   ! Get the halo size

   NHXW = 1 ; NHXE = NX ; NHYS = 1 ; NHYN = NY
   DO WHILE ( MAXVAL(MAPSTA(:,NHXW)) == 0. )
     NHXW = NHXW + 1
   END DO
   NHXW = NHXW - 1
   DO WHILE ( MAXVAL(MAPSTA(:,NHXE)) == 0. )
     NHXE = NHXE - 1
   END DO
   NHXE = NX - NHXE
   DO WHILE ( MAXVAL(MAPSTA(NHYS,:)) == 0. )
     NHYS = NHYS + 1
   END DO
   NHYS = NHYS - 1
   DO WHILE ( MAXVAL(MAPSTA(NHYN,:)) == 0. )
     NHYN = NHYN - 1
   END DO
   NHYN = NY - NHYN

   ! Define the partition relative to the processor

   ALLOCATE( ila_paral(2+NSEAL*2) )
   !! * Define the partition : OASIS ORANGE partition
   ila_paral(1) = 3
   ! total number of segments of the global domain
   ila_paral(2) = NSEAL

   DO JSEA=1, NSEAL
!/DIST            ISEA   = IAPROC + (JSEA-1)*NAPROC
!/SHRD            ISEA   = JSEA
     IX = MAPSF(ISEA,1)
     IY = MAPSF(ISEA,2)
     ! segment offset
     ila_paral(JSEA*2+1) = (IY - NHYN -1)*(NX - NHXE - NHXW) + (IX - NHXW - 1)
     ! segment size
     ila_paral(JSEA*2+2) = 1
   END DO

   CALL oasis_def_partition (il_part_id, ila_paral, il_err, NNODES)

   IF (il_err /= 0) THEN
      CALL oasis_abort(il_compid, 'cpl_oasis_define', 'Problem during oasis_def_partition')
   ENDIF

   ila_shape(:) = (/1, NSEAL, 1, 1 /)

   !! * Coupling fields declaration
   ila_var_nodims(1) = 2    ! rank of fields array
   ila_var_nodims(2) = 1    ! always 1 with OASIS3-MCT 2.0
      
   CALL get_list_exch_field (NDSO, rcv_fld, snd_fld, il_nb_rcv, il_nb_snd, rcv_str, snd_str)

   !! Send coupling fields  
   DO ib_i = 1, il_nb_snd
      CALL oasis_def_var (snd_fld(ib_i)%il_field_id     &
           &            , snd_fld(ib_i)%cl_field_name   &
           &            , il_part_id                    & 
           &            , ila_var_nodims                &
           &            , OASIS_Out                     &
           &            , ila_shape                     &
           &            , OASIS_Real                    &
           &            , il_err )
      
      IF (il_err /= 0) THEN
         CALL oasis_abort(il_compid, 'cpl_oasis_define', 'Problem during oasis_def_var')
      ENDIF         
   ENDDO
   
   !! Received coupling fields  
   DO ib_i = 1, il_nb_rcv
      CALL oasis_def_var (rcv_fld(ib_i)%il_field_id    &
           &            , rcv_fld(ib_i)%cl_field_name  &
           &            , il_part_id                   & 
           &            , ila_var_nodims               &
           &            , OASIS_In                     &
           &            , ila_shape                    &
           &            , OASIS_Real                   &
           &            , il_err )
      
      IF (il_err /= 0) THEN
         CALL oasis_abort(il_compid, 'cpl_oasis_define', 'Problem during oasis_def_var')
      ENDIF         
   ENDDO   
 
   !! * End of definition phase
   
   CALL oasis_enddef(il_err)

   IF (il_err /= 0) THEN
      CALL oasis_abort(il_compid, 'cpl_oasis_define', 'Problem during oasis_enddef')
   ENDIF         


  END SUBROUTINE cpl_oasis_define


   !!======================================================================


  SUBROUTINE cpl_oasis_snd(id_nb, id_time, rda_field, ld_action)

   !&E---------------------------------------------------------------------
   !&E                 ***  ROUTINE cpl_oasis_snd  ***
   !&E
   !&E ** Purpose : In the model time step loop, each process sends its parts of the coupling field
   !&E
   !&E ** Description :
   !&E
   !&E ** Called by : 
   !&E
   !&E ** External calls :
   !&E
   !&E ** Used ij-arrays :
   !&E
   !&E ** Modified variables : 
   !&E
   !&E ** Reference :
   !&E
   !&E ** History :
   !&E       2013-07 : A. THEVENIN (CERFACS) : Creation
   !&E
   !&E---------------------------------------------------------------------

   !! * Arguments
   INTEGER, INTENT(IN)   :: id_nb                         ! Number of the field to be send
   INTEGER, INTENT(IN)   :: id_time                       ! Atmosphere time-step in seconds
   REAL(KIND=8), DIMENSION(:,:), INTENT(IN) :: rda_field  ! Coupling field array to be send
   LOGICAL, INTENT(OUT)  :: ld_action                     ! Action performed
   
   !! * Local declarations
   INTEGER :: il_info                                     ! OASIS3-MCT info argument
   
   !!----------------------------------------------------------------------
   !! * Executable part

   CALL oasis_put ( snd_fld(id_nb)%il_field_id &
   &              , id_time                    &
   &              , rda_field                  &
   &              , il_info                    &
   &                )

   ld_action = il_info == OASIS_Sent     .OR. il_info == OASIS_ToRest .OR.   &
   &           il_info == OASIS_SentOut  .OR. il_info == OASIS_ToRestOut

  END SUBROUTINE cpl_oasis_snd    


   !!======================================================================


  SUBROUTINE cpl_oasis_rcv(id_nb, id_time, rda_field, ld_action)

   !&E---------------------------------------------------------------------
   !&E                 ***  ROUTINE cpl_oasis_rcv  ***
   !&E
   !&E ** Purpose : In the model time step loop, each process receives its parts of the coupling field
   !&E
   !&E ** Description :
   !&E
   !&E ** Called by : 
   !&E
   !&E ** External calls :
   !&E
   !&E ** Used ij-arrays :
   !&E
   !&E ** Modified variables : 
   !&E
   !&E ** Reference :
   !&E
   !&E ** History :
   !&E       2013-07 : A. THEVENIN (CERFACS) : Creation
   !&E
   !&E---------------------------------------------------------------------

   !! * Argument
   INTEGER, INTENT(IN)   :: id_nb                          ! Number of the field to be received
   INTEGER, INTENT(IN)   :: id_time                        ! Ocean time-step in seconds
   REAL(KIND=8), DIMENSION(:,:), INTENT(OUT) :: rda_field    ! Coupling field array to be received
   LOGICAL, INTENT(OUT)  :: ld_action                      ! Action performed

   !! * Local declarations
   INTEGER :: il_info                                      ! OASIS3-MCT info argument
   
   !!----------------------------------------------------------------------
   !! * Executable part

   CALL oasis_get ( rcv_fld(id_nb)%il_field_id &
   &              , id_time                    &
   &              , rda_field                  &
   &              , il_info                    &
   &                )
   

   ld_action = il_info == OASIS_Recvd   .OR. il_info == OASIS_FromRest .OR.   &
   &           il_info == OASIS_RecvOut .OR. il_info == OASIS_FromRestOut


  END SUBROUTINE cpl_oasis_rcv


   !!======================================================================


  SUBROUTINE cpl_oasis_finalize

   !&E---------------------------------------------------------------------
   !&E                 ***  ROUTINE cpl_prism_finalize  ***
   !&E
   !&E ** Purpose : Finalizes the coupling  
   !&E
   !&E ** Description :
   !&E
   !&E ** Called by : 
   !&E
   !&E ** External calls :
   !&E
   !&E ** Used ij-arrays :
   !&E
   !&E ** Modified variables : 
   !&E
   !&E ** Reference :
   !&E
   !&E ** History :
   !&E       2013-07 : A. THEVENIN (CERFACS) : Creation
   !&E
   !&E---------------------------------------------------------------------

   !! * Argument
   
   !! * Local declarations
   
   !!----------------------------------------------------------------------
   !! * Executable part

   CALL oasis_terminate (il_err)
   
   IF (il_err /= 0) THEN
      CALL oasis_abort(il_compid, 'cpl_prism_finalize', 'Problem during oasis_terminate')
   ENDIF  

  END SUBROUTINE cpl_oasis_finalize


   !!======================================================================


  SUBROUTINE get_list_exch_field(NDSO, rcv, snd, id_nb_rcv, id_nb_snd, rcv_str, snd_str)

   !&E---------------------------------------------------------------------
   !&E                 ***  ROUTINE get_list_exch_field  ***
   !&E
   !&E ** Purpose : Provides the list of coupling fields  
   !&E
   !&E ** Description :
   !&E
   !&E ** Called by : 
   !&E
   !&E ** External calls :
   !&E
   !&E ** Used ij-arrays :
   !&E
   !&E ** Modified variables : 
   !&E
   !&E ** Reference :
   !&E
   !&E ** History :
   !&E       2013-07 : A. THEVENIN (CERFACS) : Creation
   !&E       2014-03 : J. PIANEZZE (LPO)     : Add Meso-NH
   !&E       2015-04 : M. ACCENSI (LPO)      : Add fields selection
   !&E
   !&E---------------------------------------------------------------------
   USE W3SERVMD, ONLY: STRSPLIT

   !! * Argument
   TYPE(CPL_FIELD), DIMENSION(ip_maxfld), INTENT (INOUT)   :: rcv, snd
   INTEGER, INTENT(INOUT)                                  :: id_nb_rcv, id_nb_snd 
   INTEGER, INTENT(IN)                                     :: NDSO
   CHARACTER(LEN=1024), INTENT(IN)                         :: rcv_str, snd_str
    
   !! * Local declarations
   CHARACTER(LEN=100)                                      :: OUT_NAMES(50), TESTSTR
   INTEGER                                                 :: IOUT
   
   !!----------------------------------------------------------------------
   !! * Executable part

   !! Coupling fields received by WW3
   id_nb_rcv = 0



   OUT_NAMES(:)=''
   CALL STRSPLIT(rcv_str,OUT_NAMES)
   IOUT=0
   DO WHILE (len_trim(OUT_NAMES(IOUT+1)).NE.0)
     TESTSTR=OUT_NAMES(IOUT+1)
     SELECT CASE(TRIM(TESTSTR(1:6)))

!/OASOCM   CASE('DRY')
!/OASOCM     ! wet-drying at the middle of the cell
!/OASOCM     id_nb_rcv=id_nb_rcv+1
!/OASOCM     rcv(id_nb_rcv)%cl_field_name='WW3__WDH'
   
!/OASOCM     ! wet-drying at u-location
!/OASOCM     id_nb_rcv=id_nb_rcv+1
!/OASOCM     rcv(id_nb_rcv)%cl_field_name='WW3__WDU'
   
!/OASOCM     ! wet-drying at v-location
!/OASOCM     id_nb_rcv=id_nb_rcv+1
!/OASOCM     rcv(id_nb_rcv)%cl_field_name='WW3__WDV'

!/OASOCM   CASE('SSH')
!/OASOCM     ! ssh : sea surface height (m)
!/OASOCM     id_nb_rcv=id_nb_rcv+1
!/OASOCM     rcv(id_nb_rcv)%cl_field_name='WW3__SSH'
 
!/OASOCM   CASE('CUR')
!/OASOCM     ! uz : sea surface zonal currents (m.s-1)
!/OASOCM     id_nb_rcv=id_nb_rcv+1
!/OASOCM     rcv(id_nb_rcv)%cl_field_name='WW3___UZ'

!/OASOCM     ! vz : sea surface meridional currents (m.s-1)
!/OASOCM     id_nb_rcv=id_nb_rcv+1
!/OASOCM     rcv(id_nb_rcv)%cl_field_name='WW3___VZ'

!/OASACM   CASE('WND')
!/OASACM     ! U10 : 10m u-wind speed (m.s-1)
!/OASACM     id_nb_rcv=id_nb_rcv+1
!/OASACM     rcv(id_nb_rcv)%cl_field_name='WW3__U10'

!/OASACM     ! V10 : 10m v-wind speed (m.s-1)
!/OASACM     id_nb_rcv=id_nb_rcv+1
!/OASACM     rcv(id_nb_rcv)%cl_field_name='WW3__V10'

       CASE DEFAULT
         WRITE (NDSO,1001) TRIM(TESTSTR(1:6))
     END SELECT
     IOUT=IOUT+1
   END DO 

   !! Coupling fields sent by WW3
   id_nb_snd = 0   


   OUT_NAMES(:)=''
   CALL STRSPLIT(snd_str,OUT_NAMES)
   IOUT=0
   DO WHILE (len_trim(OUT_NAMES(IOUT+1)).NE.0)
     TESTSTR=OUT_NAMES(IOUT+1)
     SELECT CASE(TRIM(TESTSTR(1:6)))

!/OASIS    CASE('HS')
!/OASIS      ! Significant wave height (m)
!/OASIS      id_nb_snd = id_nb_snd +1
!/OASIS      snd(id_nb_snd)%cl_field_name='WW3___HS'

!/OASOCM   CASE('DRY')
!/OASOCM     ! mask to manage wet-drying
!/OASOCM     id_nb_snd = id_nb_snd +1
!/OASOCM     snd(id_nb_snd)%cl_field_name='WW3__DRY'

!/OASOCM   CASE('T0M1')
!/OASOCM     ! T0M1 / wave_t0m1 : mean period (s)
!/OASOCM     id_nb_snd = id_nb_snd +1
!/OASOCM     snd(id_nb_snd)%cl_field_name='WW3_T0M1'

!/OASOCM   CASE('DIR')
!/OASOCM     ! THM / wave_thm : cosinus of mean direction (n/a)
!/OASOCM     id_nb_snd = id_nb_snd +1
!/OASOCM     snd(id_nb_snd)%cl_field_name='WW3_CDIR'

!/OASOCM     ! THM / wave_thm : sinus of mean direction (n/a)
!/OASOCM     id_nb_snd = id_nb_snd +1
!/OASOCM     snd(id_nb_snd)%cl_field_name='WW3_SDIR'

!/OASOCM   CASE('BHD')
!/OASOCM     ! BHD / wave_bhd : wave-induced Bernoulli head pressure (bhd in N.m-1)
!/OASOCM     id_nb_snd = id_nb_snd +1
!/OASOCM     snd(id_nb_snd)%cl_field_name='WW3__BHD'

!/OASOCM   CASE('TWO')
!/OASOCM     ! tauox / wave_tauox : x-component of the wave-ocean momentum flux (tauox in m2.s-2)
!/OASOCM     id_nb_snd = id_nb_snd +1
!/OASOCM     snd(id_nb_snd)%cl_field_name='WW3_TWOX'

!/OASOCM     ! tauoy / wave_tauoy : y-component of the wave-ocean momentum flux (tauox in m2.s-2)
!/OASOCM     id_nb_snd = id_nb_snd +1
!/OASOCM     snd(id_nb_snd)%cl_field_name='WW3_TWOY'

!/OASOCM   CASE('UBR')
!/OASOCM     ! uba / wave_uba : rms amplitude of orbital velocity of the waves (m/s)
!/OASOCM     id_nb_snd = id_nb_snd +1
!/OASOCM     snd(id_nb_snd)%cl_field_name='WW3__UBR'

!/OASOCM   CASE('FOC')
!/OASOCM     ! phioc / wave_phioc : Wave-to-ocean TKE flux (phioc in W.m-2)
!/OASOCM     id_nb_snd = id_nb_snd +1
!/OASOCM     snd(id_nb_snd)%cl_field_name='WW3__FOC'

!/OASOCM   CASE('TAW')
!/OASOCM     ! tauwix / wave_tauwix : Net wave-supported stress, u component (tauwix in m2.s-2)
!/OASOCM     id_nb_snd = id_nb_snd +1
!/OASOCM     snd(id_nb_snd)%cl_field_name='WW3_TAWX'

!/OASOCM     ! tauwiy / wave_tauwiy : ! Net wave-supported stress, v component (tauwix in m2.s-2)
!/OASOCM     id_nb_snd = id_nb_snd +1
!/OASOCM     snd(id_nb_snd)%cl_field_name='WW3_TAWY'

!/OASOCM   CASE('LM')
!/OASOCM     ! wlm / wave_wlm : mean length wave (m)
!/OASOCM     id_nb_snd = id_nb_snd +1
!/OASOCM     snd(id_nb_snd)%cl_field_name='WW3___LM'

!/OASACM   CASE('CUR')
!/OASACM     ! Ocean sea surface current (m.s-1)
!/OASACM     id_nb_snd = id_nb_snd +1
!/OASACM     snd(id_nb_snd)%cl_field_name='WW3___US'

!/OASACM     ! Ocean sea surface current (m.s-1)
!/OASACM     id_nb_snd = id_nb_snd +1
!/OASACM     snd(id_nb_snd)%cl_field_name='WW3___VS'

!/OASACM   CASE('CHA')
!/OASACM     ! Charnock Coefficient (-)
!/OASACM     id_nb_snd = id_nb_snd +1
!/OASACM     snd(id_nb_snd)%cl_field_name='WW3__CHA'

!/OASACM   CASE('FP')
!/OASACM     ! Peak period (s)
!/OASACM     id_nb_snd = id_nb_snd +1
!/OASACM    snd(id_nb_snd)%cl_field_name='WW3___TP'

       CASE DEFAULT
         WRITE (NDSO,1002) TRIM(TESTSTR(1:6))
     END SELECT
     IOUT=IOUT+1
   END DO 

!
 1001 FORMAT (/' *** WAVEWATCH III WARNING IN W3OACPMD : '/                       &
               '     REQUESTED COUPLING RECEIVED FIELD ',A,' WAS NOT RECOGNIZED.'/)
!
 1002 FORMAT (/' *** WAVEWATCH III WARNING IN W3OACPMD : '/                       &
               '     REQUESTED COUPLING SENT FIELD ',A,' WAS NOT RECOGNIZED.'/)
!
  END SUBROUTINE get_list_exch_field

END MODULE w3oacpmd
