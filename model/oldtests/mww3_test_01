#!/bin/sh
#############################################################################
#                                                                           #
# mww3_test_01 : Tests for expanded status map.                             #
#                                                                           #
# Model should be compiled with the switches :                              #
#                                                                           #
#   !/FLX0 !/LN0 !/ST0 !/NL0 !/BT0 !/DB1 !/TR0 !/BS0 !/XX0                  #
#                        Only depth breaking relevant here.                 #
#   !/PRn                Selecting one of the propagation schemes.          #
#   !/O0 !/O1 !/O2 !/O3 !/O4 !/O5 !/O6 !/O7 !/O10 !/O11                     #
#                        Sdt out output options.                            #
#                                                                           #
# No other optional switches should be used.                                #
#                                                                           #
# Remarks :                                                                 #
# - Grads scripts do not display but produce .eps files.                    #
# - Script set up for parallel running :                                    #
#    a) For cluster with mpirun activate mpirun command lines and set       #
#       environment with valiables MPI and proc in section 0.               #
#    b) For IBM with poe, activale poe command lines and set environment    #
#       variables in poe jobcards at the top of the scripts.                #
#    c) For SGI with MPIT several environment setting are needed in the     #
#       head of the script, as well as job cards and using the mpiexec_mpt  #
#       to start the code to run in the parallel environment.               #
#    d) In present form, IBM qsub directives disabled to avoid unwanted     #
#       translation by msub on zeus.                                        #
#                                                                           #
#                                              Hendrik Tolman, Jun 2002     #
#                                                 Last Mod : March 2012     #
#                                                                           #
#    Copyright 2009-2012 National Weather Service (NWS),                    #
#       National Oceanic and Atmospheric Administration.  All rights        #
#       reserved.  WAVEWATCH III is a trademark of the NWS.                 #
#       No unauthorized use without permission.                             #
#                                                                           #
#############################################################################

# #@ shell=/bin/sh
# #@ job_name=mww3_test_01
# #@ output=mww3_test_01.out
# #@ error=mww3_test_01.out
# #@ notification=never
# #@ class=dev
# #@ network.MPI=csss,shared,us
# #@ total_tasks=4
# #@ node=1
# #@ job_type=parallel
# #@ wall_clock_limit=00:01:00
# #@ resources=ConsumableCpus(1) ConsumableMemory(500 MB)
# #@ account_no=WAV-T2O
# #@ queue

#PBS -l procs=4
# #PBS -l mem=1G
#PBS -q batch
#PBS -l walltime=15:00
#PBS -A omd
#PBS -N mww3_test_01
#PBS -j oe
#PBS -o mww3_test_01.out

# 0. Preparations -----------------------------------------------------------

  set -e

  ww3_env='.wwatch3.env'   # setup file

  grads='yes'              # run grads scripts
    MPI='yes'              # run ww3_shel in MPI mode
   proc=4                  # only used for mpirun

# zeus MPIT settings

  MPI_BUFS_PER_PROC=128
  MPI_BUFS_PER_HOST=128
  MPI_GROUP_MAX=128

# 0.a Set-up variables

  cd
  if [ -f $ww3_env ]
  then
    set `grep WWATCH3_DIR $ww3_env` ; shift
    main_dir="$*"
    set `grep WWATCH3_TMP $ww3_env` ; shift
    temp_dir="$*"
  else
    echo "*** Set-up file $ww3_env not found ***"
    exit
  fi

  path_w="$temp_dir"              # work directory
  path_e="$main_dir/exe"          # path for executables
  path_a="$main_dir/aux"          # path for aux files and scripts
  path_o="$main_dir/test"         # path for output files
  path_o="$main_dir/work"

# 0.b Clean-up

  rm -f $path_o/ww3_????.out
  rm -f $path_o/log.ww3
  rm -f $path_o/test.ww3
  rm -f $path_o/test???.ww3
  rm -f $path_o/tab??.ww3
  rm -f $path_o/*.eps
  rm -f $path_o/buoy.data

  cd $path_w
  rm -f *.ww3 *.gs

  echo ' ' ; echo ' '
  echo '                  ======> TEST RUN WAVEWATCH III <====== '
  echo '                    ==================================   '
  echo '                                     expanded status map '
  echo ' '

# 1. Grid pre-processor -----------------------------------------------------

  echo ' '
  echo '+--------------------+'
  echo '|  Grid preprocessor |'
  echo '+--------------------+'
  echo ' '

cat > ww3_grid.inp << EOF
$ WAVEWATCH III Grid preprocessor input file
$ ------------------------------------------
  'Status map testing            '
$
   1.1 0.04177 25 24 0.
$
   F T T T F F
   450.  450.  450.   15.
$
END OF NAMELISTS
$
   'RECT' F 'NONE'
   23   23
    10.E3   10.E3   1.
   -10.E3  -10.E3   1.
$
  -0.1 0.25  10  -1. 3 1 '(....)' 'UNIT' 'input'
$
 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75
 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75
 75 75 75 50 50 50 50 25 50 50 50 50 75 75 75 75 75 75 75 75 75 75 75
 75 75 50 25 25 25 25 12 25 25 25 25 25 25 25 50 75 75 75 75 75 75 75
 75 75 50 25 19 18 12  1 16 19 22 23 25 25 25 25 50 75 75 75 75 75 75
 75 75 50 25 17 10  1  1  1 11 18 22 25 25 10  1 25 50 75 75 75 75 75
 75 75 50 25 17  6  0  0  0  6 13 20 23 25 14  1  1 25 50 75 75 75 75
 75 50 25 25 16  9  3  0  0  7 11 18 21 25 25 12  1 25 50 75 75 75 75
 75 50 25 19 16  8  4  0  0  0  5 13 17 21 25 18  1  1 25 50 75 75 75
 75 50 25 19 14  9  5  3  0  0  3  9 15 16 25 25 14 19 25 25 50 75 75
 75 50 25 19 16 11  6  4  0  2  5 12  7 13 16 25 25 25 25 25 50 75 75
 75 50 25 22 18 12  9  5  0  3  6  7  8 12 11 14 16 19 21 25 50 75 75
 75 50 25 25 19 15 12  7  3  6  7  4  4  3  0  5  9 11 21 25 50 75 75
 75 75 50 25 22 18 14  9  6  6  2  1  0  0  0  1  1  8 19 25 50 75 75
 75 75 75 50 25 25 20 12 11  9  4  0  0  0 .1  1  1  7 18 25 25 50 75
 75 75 75 75 50 25 21 14 12  8  3  0  0  0  1  1  1  6 19 25 25 50 75
 75 75 75 50 25 25 22 20 17 10  7  3  0  3  1  2  3  7 21 25 50 75 75
 75 75 75 50 25 25 23 21 19 12  9  3  3  3  3  4  5 11 22 25 50 75 75
 75 75 75 50 25 25 24 22 19 17 14 11  9 11  5  9 14 16 23 25 50 50  0
 75 75 75 50 50 25 25 25 25 21 22 19 14 16  8 11 25 25 25 50 50  0  0
 75 75 75 75 50 50 50 50 25 25 25 25 25 25 25 25 25 50 50 75  0  0  0
 75 75 75 75 75 75 75 75 50 50 50 50 50 50 50 50 50 75 75  0  0  0  0
 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75  0  0  0  0  0
$
   10 1 1 '(....)' 'UNIT' 'mapsta.inp'
$
  3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 0 0 0 0 0
  2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0
  2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0
  2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0
  2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0
  2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3
  2 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 3
  2 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 3
  2 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 3
  2 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 3
  2 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 3
  2 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 3
  2 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 3
  2 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 3
  2 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 3
  2 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 3
  2 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 3
  2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3
  2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3
  2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 3
  2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 3 3
  2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 3 3 3
  3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
$
$  1  2  F
$  1 22  T
$  0  0  F
$
$ 17 23  F
$ 23 17  T
$  0  0  F
$
$ 22 22
$  0  0
$
   0. 0. 0. 0.  0
EOF

  echo "   Screen ouput routed to $path_o/ww3_grid.out"
  $path_e/ww3_grid > $path_o/ww3_grid.out

  rm -f ww3_grid.inp

# 2. Initial conditions -----------------------------------------------------

  echo ' '
  echo '+--------------------+'
  echo '| Initial conditions |'
  echo '+--------------------+'
  echo ' '

cat > ww3_strt.inp << EOF
$ WAVEWATCH III Initial conditions input file
$ -------------------------------------------
  1
   0.15 0.02    240. 4  -10.E3 10.E3  100.E3 1.E8  1.00
EOF

  echo "   Screen ouput routed to $path_o/ww3_strt.out"
  $path_e/ww3_strt > $path_o/ww3_strt.out

  rm -f ww3_strt.inp

# 3. Input fields -----------------------------------------------------------

  echo ' '
  echo '+--------------------+'
  echo '| Input data         |'
  echo '+--------------------+'
  echo ' '

cat > ww3_prep.inp << EOF
$ WAVEWATCH III Field preprocessor input file
$ -------------------------------------------
   'ICE' 'AI' T T
$
  'UNIT' 3 1 '(..T..)' '(..F..)' 
  10 'from here'
$
   19680606 060000
 0. 0. 0. .7 .9 .9 .9 .9 .9 .9 .9 .7 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. .7 .9 .9 .9 .9 .9 .9 .9 .7 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. .7 .9 .9 .9 .9 .9 .9 .7 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. .7 .9 .9 .9 .9 .9 .7 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. .7 .9 .9 .9 .7 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. .7 .7 .7 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
   19680606 070000
 0. 0. 0. 0. 0. .7 .9 .9 .9 .7 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. .7 .9 .9 .9 .7 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. .7 .7 .9 .7 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. .7 .7 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
   19680606 090000
 0. 0. 0. 0. 0. 0. .7 .9 .7 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. .7 .9 .7 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. .7 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
EOF

  echo "   Screen ouput routed to $path_o/ww3_prep.out"
  $path_e/ww3_prep > $path_o/ww3_prep.out

  rm -f ww3_prep.inp

# 4. Main program -----------------------------------------------------------

  echo ' '
  echo '+--------------------+'
  echo '|    Main program    |'
  echo '+--------------------+'
  echo ' '

cat > buoy.data << EOF
   100.E3 100.E3  'point_A   '
   150.E3 150.E3  'point_B   '
    50.E3 180.E3  'point_C   '
    60.E3 170.E3  'point_D   '
     0.E3   0.E3  'STOPSTRING'
EOF

cat > ww3_shel.inp << EOF
$ WAVEWATCH III shell input file
$ ------------------------------
   T T
   F T
   F T
   T
   F
   F
   F
$
   19680606 000000
   19680606 120000
$
   1
$
   19680606 000000    450  19680607 000000
     T T T T T  T T T T T  T T F F F  F F F F F  F F F F F
     F F F F F  F
$    T T T T T  T T T T T  T T T T T  T T T T T  T T T T T
$    T T T T T  T
   19680606 000000    450  19680607 000000
EOF
cat buoy.data >> ww3_shel.inp
cat >> ww3_shel.inp << EOF
   19680606 000000      0  19680607 000000
   19680606 000000      0  19680607 000000
   19680606 000000      0  19680607 000000
   19680606 000000      0  19680607 000000
$
   'LEV' 19680606 000000    1.5
   'LEV' 19680606 010000    1.0
   'LEV' 19680606 020000    0.5
   'LEV' 19680606 030000    0.0
   'LEV' 19680606 040000   -0.5
   'LEV' 19680606 050000   -1.0
   'LEV' 19680606 060000   -1.5
   'LEV' 19680606 070000   -2.0
   'LEV' 19680606 080000   -2.5
   'LEV' 19680606 090000   -2.0
   'LEV' 19680606 100000   -1.0
   'LEV' 19680606 110000    0.0
   'LEV' 19680606 120000    0.0
   'STP'
EOF

  if [ "$MPI" = 'yes' ]
  then
    mpiexec_mpt -np $PBS_NP $path_e/ww3_shel
#   mpirun -np $proc $path_e/ww3_shel
#   poe $path_e/ww3_shel
  else
    $path_e/ww3_shel
  fi

  rm -f ww3_shel.inp ice.ww3

  echo ' ' ; echo "   Output file log.ww3 routed to $path_o"
  mv log.ww3 $path_o/.

  set +e
  nr_test=`ls test*.ww3 2> /dev/null | wc -w | awk '{ print $1}'`
  set -e
  if [ "$nr_test" != '0' ]
  then
    for file in `ls test*.ww3`
    do
      size=`wc -w $file | awk '{print $1}'`
      if [ "$size" = 0 ] ; then
        rm -f $file ; fi
    done
  fi

  set +e
  nr_test=`ls test*.ww3 2> /dev/null | wc -w | awk '{ print $1}'`
  set -e
  if [ "$nr_test" != '0' ]
  then
    echo "   Output file test[nnn].ww3 routed to $path_o"
    mv test*.ww3 $path_o/.
  fi
  
# exit 99

  if [ -f buoy.data ]
  then
    echo "   Input file buoy.data routed to $path_o"
    cp buoy.data $path_o/.
  fi

# 4. Gridded output ---------------------------------------------------------

  echo ' '
  echo '+--------------------+'
  echo '|   Gridded output   |'
  echo '+--------------------+'
  echo ' '

cat > ww3_outf.inp << EOF
$ WAVEWATCH III Grid output post-processing
$ -----------------------------------------
  19680606 000000  3600. 13
$
  F F F F F  T F F F F  F F F F F  F F F F F  F F F F F  F F F F F  F
$
  1  1
  1 23 1 1 23 1 F F T
EOF

  echo "   Screen ouput routed to $path_o/ww3_outf.out"
  $path_e/ww3_outf > $path_o/ww3_outf.out

  rm -f ww3_outf.inp

cat > gx_outf.inp << EOF
$ WAVEWATCH III Grid output post-processing ( GrADS )
$ ---------------------------------------------------
  19680606 000000   900. 999
  T T T T T  T T T T T  T T T T T  T T T T T  T T T T T T  T T T T T  T
  0 999 0 999  T T
EOF

  echo "   Screen ouput routed to $path_o/gx_outf.out"
  $path_e/gx_outf > $path_o/gx_outf.out

  rm -f gx_outf.inp

cat > map.gs << EOF
*
* map.gs  : Imbedded GrADS script for test cases
* ----------------------------------------------------------------
*           Scripts used :
*              colorset.gs : Sets up shading colors
*
* General set up

  t1 = 13
  tn = 49
  ts = 12

  plot_map = 'yes'
  plot_act = 'yes'
  plot_hs  = 'no'
  plot_dir = 'yes'
  plot_bys = 'no'

  xpl = 1.0
  xph = 7.5
  ypl = 2.5
  yph = 9.0

  xml = -10
  xmh = 210
  yml = -10
  ymh = 210

  mdx =   2.
  pdx = ( xph - xpl ) / ( xmh - xml ) * mdx

  'set display color white'
  'run colorset.gs'

  gdate="yyyy/mm/dd"
  '!date -u "+%Y/%m/%d" > tmp_grads_gdate'
  result = read (tmp_grads_gdate)
  gdate = sublin(result,2)
  '!rm -f tmp_grads_gdate'

* Get buoy data from buoy.data

  '!cat buoy.data | wc -l > tmp_grads_nbuoys'
  result = read (tmp_grads_nbuoys)
  line   = sublin(result,2)
  nr     = subwrd(line,1)
  nr = nr - 1
  '!rm -f tmp_grads_nbuoys'

  '!sed -e "s/\./ /g"  -e "s/\_/ /g" buoy.data > tmp_grads_buoy'

  i = 1
  while ( i <= nr )
    result = read (tmp_grads_buoy)
    line   = sublin(result,2)
    x.i = subwrd(line,1)
    y.i = subwrd(line,3)
    s.i = subwrd(line,6)
    i = i + 1
  endwhile
  '!rm -f tmp_grads_buoy'

* ID output to screen

  say ' '
  say '----------------------'
  say '*** Running map.gs ***'
  say '----------------------'
  say ' ' 
  say 'Number of ouptput points : ' nr
  say 'Time steps from ' t1 ' through ' tn ' with step ' ts

* Loop over time steps

  'open ww3'

  i = 1
  t = t1

  '!rm -f plot.grads.*'

  while ( t <= tn )
    'set t ' t

    'query time'
    gradsdate = subwrd(result,3)
    test = substr ( gradsdate, 3, 1 )
    if ( test='Z' )
      year = substr ( gradsdate, 9, 4 )
      mnth = substr ( gradsdate, 6, 3 )
      day  = substr ( gradsdate, 4, 2 )
      hour = substr ( gradsdate, 1, 2 )
      min  = '00'
    else
      year = substr ( gradsdate, 12, 4 )
        mnth = substr ( gradsdate, 9, 3 )
      day  = substr ( gradsdate, 7, 2 )
      hour = substr ( gradsdate, 1, 2 )
      min  = substr ( gradsdate, 4, 2 )
    endif

    month= '??'
    if (mnth='JAN'); month= '01'; endif;
    if (mnth='FEB'); month= '02'; endif;
    if (mnth='MAR'); month= '03'; endif;
    if (mnth='APR'); month= '04'; endif;
    if (mnth='MAY'); month= '05'; endif;
    if (mnth='JUN'); month= '06'; endif;
    if (mnth='JUL'); month= '07'; endif;
    if (mnth='AUG'); month= '08'; endif;
    if (mnth='SEP'); month= '09'; endif;
    if (mnth='OCT'); month= '10'; endif;
    if (mnth='NOV'); month= '11'; endif;
    if (mnth='DEC'); month= '12'; endif;

    if ( i = 1 ) ; pan = '(a)' ; endif
    if ( i = 2 ) ; pan = '(b)' ; endif
    if ( i = 3 ) ; pan = '(c)' ; endif
    if ( i = 4 ) ; pan = '(d)' ; endif
    if ( i = 5 ) ; pan = '(e)' ; endif
    if ( i = 6 ) ; pan = '(f)' ; endif
    if ( i = 7 ) ; pan = '(g)' ; endif
    if ( i = 8 ) ; pan = '(g)' ; endif
    if ( i > 8 ) ; pan = '(-)' ; endif

*   vdate = year '/' month '/' day ' ' hour ':' min 'z'
    vdate = pan ' ' hour ':' min 'z'

    say '   processing time step ' t ', time is ' vdate

* Basic plot set up

    'enable print plot.grads.' t
    'clear'
    'set grads off'
    'set lon ' xml / 10 ' ' xmh / 10
    'set lat ' yml / 10 ' ' ymh / 10
    'set xlint 5'
    'set ylint 5'
    'set xlab %.0f0'
    'set ylab %.0f0'
    'set grid on 3 60'
    'set mpdraw off'

    'set parea ' xpl ' ' xph ' ' ypl ' ' yph
    'set mproj scaled'

* Plot map

    if ( plot_map = 'yes' )
      'set line 70'
      'draw recf 1. 2.5 7.5 9.'
      'draw recf ' xpl ' ' ypl ' ' xph ' ' yph
      'set gxout grfill'
      'set clevs -3.5 -2.5 -1.5 -0.5  0.5 1.5'
      if ( plot_act = 'yes' )
        'set ccols 60  67   68   63   62   0  69'
      else
        'set ccols 60  67   68   63   62   0  70'
      endif
      'd map'
    endif

* Plot Hs

    if ( plot_hs = 'yes' )
      'set gxout shaded'
      'set clevs  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1'
      'set ccols 21 23  24  26  27  29  30  32  33  35  36  38'
      'd hs'
*     'run cbarn'
  
      'set gxout contour'
      'set cthick 1'
      'set ccolor 60'
      'set clevs  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1'
      'set clab off'
      'd hs'
    endif

* Plot directions

    if ( plot_dir = 'yes' )
      'set gxout vector'
      'set cthick 3'
      'set arrscl 0.25'
      'set arrlab off'
      'set ccolor 1'
      'd skip(cos(PEAKD),1);skip(sin(PEAKD),1)'
    endif

* Plot output locations

    'set strsiz ' 3.0 * pdx

    if ( plot_bys = 'yes' )
      j = 1
      while ( j <= nr )
        xb = xpl + ( xph - xpl ) * ( x.j - xml ) / ( xmh - xml )
        yb = ypl + ( yph - ypl ) * ( y.j - yml ) / ( ymh - yml )
        'set line 1'
        'draw recf ' xb-pdx ' ' yb-pdx ' ' xb+pdx ' ' yb+pdx
        'set string 1 c'
        'draw string ' xb + 3.0*pdx ' ' yb + 3.0*pdx ' ' s.j
        j = j + 1
      endwhile
    endif
 
* Panel and date marker

    'set string 1 r'
    'set strsiz ' 2.0 * pdx
    'draw string 7.1 8.85 ' vdate
 
* Finalize

    'print'
    'disable print'
*   pull OK
    t = t + ts
    i = i + 1
  endwhile

* End of lop iver time steps

  say ' '
  say '----------------------'
  say '*** End of map.gs  ***'
  say '----------------------'
  say ' ' 

  'quit'

* end of map.gs
EOF

  ln -s $path_a/colorset.gs .
  ln -s $path_a/cbarn.gs .

  if [ "$grads" = 'yes' ]
  then
    grads -pbc "run map.gs"
    for file in `ls plot.grads.*`
    do
      i=`echo $file | sed 's/\./ /g' | awk '{ print $3}'`
      gxeps -c -i $file -o $path_o/plot.$i.eps
    done
  fi

  echo "   GrADS script copied to $path_o/map.gs"
  mv map.gs $path_o

  rm -f buoy.data

# 5. Point output -----------------------------------------------------------

  echo ' '
  echo '+--------------------+'
  echo '|    Point output    |'
  echo '+--------------------+'
  echo ' '

  echo '   Grads preprocessing ...'

cat > gx_outp.inp << EOF
$ WAVEWATCH III Point output post-processing
$ ------------------------------------------
  19680606 000000  10800. 999
$
  1
  2
  3
  4
 -1
$
  T T T T T T 
EOF

  echo "   Screen ouput routed to $path_o/gx_outp.out"

  $path_e/gx_outp > $path_o/gx_outp.out

  rm -f gx_outp.inp

  ln -s $path_a/spec.gs .

  if [ "$grads" = 'yes' ]
  then
cat > input << EOF

EOF
    cat  input | grads -pbc "run spec"
    gxeps -c -i plot.grads -o $path_o/spec.eps
  fi

  echo '   tables ...'

cat > ww3_outp.inp << EOF
$ WAVEWATCH III Point output post-processing
$ ------------------------------------------
  19680606 000000  3600.  999
$
  1
  2
  3
  4
 -1
$
  2
  1  50
EOF

  echo "   Screen ouput routed to $path_o/ww3_outp.out"

  $path_e/ww3_outp > $path_o/ww3_outp.out
  mv tab50.ww3 $path_o/.

  rm -f ww3_outp.inp

cat > ww3_outp.inp << EOF
$ WAVEWATCH III Point output post-processing
$ ------------------------------------------
  19680606 000000  3600.  999
$
  1
  2
  3
  4
 -1
$
  2
  2  51
EOF

  echo "   Screen ouput routed to $path_o/ww3_outp.out"

  $path_e/ww3_outp > $path_o/ww3_outp.out
  mv tab51.ww3 $path_o/.

  rm -f ww3_outp.inp input plot.grads*

# 6. End, cleaning up -------------------------------------------------------

  rm -f *.gs rm -f plot_grads*

  echo ' ' ; echo ' ' ; echo "Files in `pwd` :" ; echo ' '
  ls -l *.ww3 ww3.*

  cp ww3.* $path_o

  echo ' ' ; echo "Cleaning-up `pwd`"
  rm -f *.ww3 ww3.*

  echo ' ' ; echo "Files in $path_o :" ; echo ' '
  cd $path_o
  ls -l ww3_????.out gx_????.out
  ls -l *.ww3 ww3.* *.eps *.gs

  echo ' ' ; echo ' '
  echo '                  ======>  END OF WAVEWATCH III  <====== '
  echo '                    ==================================   '
  echo ' '

# End of mww3_test_01 -------------------------------------------------------
